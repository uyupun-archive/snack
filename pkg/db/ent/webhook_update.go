// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"snack/pkg/db/ent/predicate"
	"snack/pkg/db/ent/webhook"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WebhookUpdate is the builder for updating Webhook entities.
type WebhookUpdate struct {
	config
	hooks    []Hook
	mutation *WebhookMutation
}

// Where appends a list predicates to the WebhookUpdate builder.
func (wu *WebhookUpdate) Where(ps ...predicate.Webhook) *WebhookUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetAppName sets the "app_name" field.
func (wu *WebhookUpdate) SetAppName(s string) *WebhookUpdate {
	wu.mutation.SetAppName(s)
	return wu
}

// SetWebhookURL sets the "webhook_url" field.
func (wu *WebhookUpdate) SetWebhookURL(s string) *WebhookUpdate {
	wu.mutation.SetWebhookURL(s)
	return wu
}

// SetCreatedAt sets the "created_at" field.
func (wu *WebhookUpdate) SetCreatedAt(t time.Time) *WebhookUpdate {
	wu.mutation.SetCreatedAt(t)
	return wu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableCreatedAt(t *time.Time) *WebhookUpdate {
	if t != nil {
		wu.SetCreatedAt(*t)
	}
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WebhookUpdate) SetUpdatedAt(t time.Time) *WebhookUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wu *WebhookUpdate) SetNillableUpdatedAt(t *time.Time) *WebhookUpdate {
	if t != nil {
		wu.SetUpdatedAt(*t)
	}
	return wu
}

// Mutation returns the WebhookMutation object of the builder.
func (wu *WebhookUpdate) Mutation() *WebhookMutation {
	return wu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WebhookUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WebhookMutation](ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WebhookUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WebhookUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WebhookUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WebhookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(webhook.Table, webhook.Columns, sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.AppName(); ok {
		_spec.SetField(webhook.FieldAppName, field.TypeString, value)
	}
	if value, ok := wu.mutation.WebhookURL(); ok {
		_spec.SetField(webhook.FieldWebhookURL, field.TypeString, value)
	}
	if value, ok := wu.mutation.CreatedAt(); ok {
		_spec.SetField(webhook.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(webhook.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webhook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WebhookUpdateOne is the builder for updating a single Webhook entity.
type WebhookUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WebhookMutation
}

// SetAppName sets the "app_name" field.
func (wuo *WebhookUpdateOne) SetAppName(s string) *WebhookUpdateOne {
	wuo.mutation.SetAppName(s)
	return wuo
}

// SetWebhookURL sets the "webhook_url" field.
func (wuo *WebhookUpdateOne) SetWebhookURL(s string) *WebhookUpdateOne {
	wuo.mutation.SetWebhookURL(s)
	return wuo
}

// SetCreatedAt sets the "created_at" field.
func (wuo *WebhookUpdateOne) SetCreatedAt(t time.Time) *WebhookUpdateOne {
	wuo.mutation.SetCreatedAt(t)
	return wuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableCreatedAt(t *time.Time) *WebhookUpdateOne {
	if t != nil {
		wuo.SetCreatedAt(*t)
	}
	return wuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WebhookUpdateOne) SetUpdatedAt(t time.Time) *WebhookUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wuo *WebhookUpdateOne) SetNillableUpdatedAt(t *time.Time) *WebhookUpdateOne {
	if t != nil {
		wuo.SetUpdatedAt(*t)
	}
	return wuo
}

// Mutation returns the WebhookMutation object of the builder.
func (wuo *WebhookUpdateOne) Mutation() *WebhookMutation {
	return wuo.mutation
}

// Where appends a list predicates to the WebhookUpdate builder.
func (wuo *WebhookUpdateOne) Where(ps ...predicate.Webhook) *WebhookUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WebhookUpdateOne) Select(field string, fields ...string) *WebhookUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Webhook entity.
func (wuo *WebhookUpdateOne) Save(ctx context.Context) (*Webhook, error) {
	return withHooks[*Webhook, WebhookMutation](ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WebhookUpdateOne) SaveX(ctx context.Context) *Webhook {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WebhookUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WebhookUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WebhookUpdateOne) sqlSave(ctx context.Context) (_node *Webhook, err error) {
	_spec := sqlgraph.NewUpdateSpec(webhook.Table, webhook.Columns, sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Webhook.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, webhook.FieldID)
		for _, f := range fields {
			if !webhook.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != webhook.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.AppName(); ok {
		_spec.SetField(webhook.FieldAppName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.WebhookURL(); ok {
		_spec.SetField(webhook.FieldWebhookURL, field.TypeString, value)
	}
	if value, ok := wuo.mutation.CreatedAt(); ok {
		_spec.SetField(webhook.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(webhook.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Webhook{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webhook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
