// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"snack/pkg/db/ent/webhook"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Webhook is the model entity for the Webhook schema.
type Webhook struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AppName holds the value of the "app_name" field.
	AppName string `json:"app_name,omitempty"`
	// WebhookURL holds the value of the "webhook_url" field.
	WebhookURL string `json:"webhook_url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Webhook) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case webhook.FieldID:
			values[i] = new(sql.NullInt64)
		case webhook.FieldAppName, webhook.FieldWebhookURL:
			values[i] = new(sql.NullString)
		case webhook.FieldCreatedAt, webhook.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Webhook", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Webhook fields.
func (w *Webhook) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case webhook.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case webhook.FieldAppName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_name", values[i])
			} else if value.Valid {
				w.AppName = value.String
			}
		case webhook.FieldWebhookURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field webhook_url", values[i])
			} else if value.Valid {
				w.WebhookURL = value.String
			}
		case webhook.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case webhook.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				w.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Webhook.
// Note that you need to call Webhook.Unwrap() before calling this method if this Webhook
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Webhook) Update() *WebhookUpdateOne {
	return NewWebhookClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Webhook entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Webhook) Unwrap() *Webhook {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Webhook is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Webhook) String() string {
	var builder strings.Builder
	builder.WriteString("Webhook(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("app_name=")
	builder.WriteString(w.AppName)
	builder.WriteString(", ")
	builder.WriteString("webhook_url=")
	builder.WriteString(w.WebhookURL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Webhooks is a parsable slice of Webhook.
type Webhooks []*Webhook
